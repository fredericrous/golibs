package crypto

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_SignEd25519(t *testing.T) {
	t.Parallel()
	c := NewCrypto()
	//nolint:lll
	tests := map[string]struct {
		data      []byte
		signKey   [signKeySize]byte
		signature []byte
	}{
		"no data": {
			data:      nil,
			signKey:   [signKeySize]byte{0x46, 0xb9, 0xdd, 0x2b, 0xb, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb, 0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0xc, 0x27, 0x64, 0x6e, 0xd5, 0x76, 0x2f, 0xd7, 0x5d, 0xc4, 0xdd, 0xd8, 0xc0, 0xf2, 0x0, 0xcb, 0x5, 0x1, 0x9d, 0x67, 0xb5, 0x92, 0xf6, 0xfc, 0x82, 0x1c, 0x49, 0x47, 0x9a, 0xb4, 0x86, 0x40, 0x29, 0x2e, 0xac, 0xb3, 0xb7, 0xc4, 0xbe},
			signature: []byte{0x2f, 0x33, 0xb, 0x10, 0x97, 0x15, 0xd7, 0x66, 0x8b, 0xdc, 0x2c, 0xdd, 0x42, 0x4d, 0x17, 0xde, 0xa0, 0xca, 0xd0, 0xb4, 0xe6, 0x67, 0xd0, 0xf3, 0x16, 0xb0, 0x7f, 0xc7, 0xbf, 0x31, 0x1a, 0x93, 0x14, 0x17, 0xa0, 0xc8, 0x18, 0x85, 0xd2, 0x90, 0x5e, 0xe6, 0x9c, 0x22, 0xef, 0x93, 0xd2, 0x63, 0x12, 0x4d, 0x11, 0xf2, 0x9c, 0x4a, 0xc7, 0x9a, 0x81, 0x1f, 0x6d, 0xc6, 0x8e, 0xff, 0x78, 0x9},
		},
		"empty data": {
			data:      []byte{},
			signKey:   [signKeySize]byte{0x46, 0xb9, 0xdd, 0x2b, 0xb, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb, 0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0xc, 0x27, 0x64, 0x6e, 0xd5, 0x76, 0x2f, 0xd7, 0x5d, 0xc4, 0xdd, 0xd8, 0xc0, 0xf2, 0x0, 0xcb, 0x5, 0x1, 0x9d, 0x67, 0xb5, 0x92, 0xf6, 0xfc, 0x82, 0x1c, 0x49, 0x47, 0x9a, 0xb4, 0x86, 0x40, 0x29, 0x2e, 0xac, 0xb3, 0xb7, 0xc4, 0xbe},
			signature: []byte{0x2f, 0x33, 0xb, 0x10, 0x97, 0x15, 0xd7, 0x66, 0x8b, 0xdc, 0x2c, 0xdd, 0x42, 0x4d, 0x17, 0xde, 0xa0, 0xca, 0xd0, 0xb4, 0xe6, 0x67, 0xd0, 0xf3, 0x16, 0xb0, 0x7f, 0xc7, 0xbf, 0x31, 0x1a, 0x93, 0x14, 0x17, 0xa0, 0xc8, 0x18, 0x85, 0xd2, 0x90, 0x5e, 0xe6, 0x9c, 0x22, 0xef, 0x93, 0xd2, 0x63, 0x12, 0x4d, 0x11, 0xf2, 0x9c, 0x4a, 0xc7, 0x9a, 0x81, 0x1f, 0x6d, 0xc6, 0x8e, 0xff, 0x78, 0x9},
		},
		"some data": {
			data:      []byte{0x46, 0xb9, 0xdd, 0x2b, 0xb, 0xa8, 0x8d},
			signKey:   [signKeySize]byte{0x46, 0xb9, 0xdd, 0x2b, 0xb, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb, 0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0xc, 0x27, 0x64, 0x6e, 0xd5, 0x76, 0x2f, 0xd7, 0x5d, 0xc4, 0xdd, 0xd8, 0xc0, 0xf2, 0x0, 0xcb, 0x5, 0x1, 0x9d, 0x67, 0xb5, 0x92, 0xf6, 0xfc, 0x82, 0x1c, 0x49, 0x47, 0x9a, 0xb4, 0x86, 0x40, 0x29, 0x2e, 0xac, 0xb3, 0xb7, 0xc4, 0xbe},
			signature: []byte{0x73, 0x2f, 0xa8, 0xee, 0x47, 0x5e, 0x21, 0x1, 0x8d, 0xb1, 0x4, 0x27, 0xa3, 0x97, 0xfa, 0xc4, 0xf9, 0x6e, 0x6e, 0xbf, 0x67, 0xd8, 0x58, 0xa1, 0x4c, 0x35, 0xb5, 0xa3, 0xa6, 0xa9, 0x71, 0x2c, 0x5d, 0x7e, 0xa0, 0xfc, 0x88, 0x67, 0xf6, 0x67, 0x25, 0xa6, 0xb7, 0x8a, 0x46, 0x99, 0x56, 0x43, 0xaf, 0xfe, 0xad, 0xca, 0x8c, 0x5e, 0x2a, 0xf9, 0xce, 0x53, 0x56, 0xf1, 0x3a, 0x1d, 0xb9, 0x4},
		},
	}
	for name, tc := range tests {
		tc := tc
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			signature := c.SignEd25519(tc.data, tc.signKey)
			assert.Equal(t, tc.signature, signature)
		})
	}
}
