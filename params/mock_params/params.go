// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/params (interfaces: Env)

// Package mock_params is a generated GoMock package.
package mock_params

import (
	gomock "github.com/golang/mock/gomock"
	logging "github.com/qdm12/golibs/logging"
	params "github.com/qdm12/golibs/params"
	url "net/url"
	reflect "reflect"
	time "time"
)

// MockEnv is a mock of Env interface
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// GetCSVInPossibilities mocks base method
func (m *MockEnv) GetCSVInPossibilities(arg0 string, arg1 []string, arg2 ...params.OptionSetter) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSVInPossibilities", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSVInPossibilities indicates an expected call of GetCSVInPossibilities
func (mr *MockEnvMockRecorder) GetCSVInPossibilities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSVInPossibilities", reflect.TypeOf((*MockEnv)(nil).GetCSVInPossibilities), varargs...)
}

// GetDatabaseDetails mocks base method
func (m *MockEnv) GetDatabaseDetails() (string, string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseDetails")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetDatabaseDetails indicates an expected call of GetDatabaseDetails
func (mr *MockEnvMockRecorder) GetDatabaseDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseDetails", reflect.TypeOf((*MockEnv)(nil).GetDatabaseDetails))
}

// GetDuration mocks base method
func (m *MockEnv) GetDuration(arg0 string, arg1 ...params.OptionSetter) (time.Duration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDuration", varargs...)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuration indicates an expected call of GetDuration
func (mr *MockEnvMockRecorder) GetDuration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockEnv)(nil).GetDuration), varargs...)
}

// GetEnv mocks base method
func (m *MockEnv) GetEnv(arg0 string, arg1 ...params.OptionSetter) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnv", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnv indicates an expected call of GetEnv
func (mr *MockEnvMockRecorder) GetEnv(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnv", reflect.TypeOf((*MockEnv)(nil).GetEnv), varargs...)
}

// GetEnvInt mocks base method
func (m *MockEnv) GetEnvInt(arg0 string, arg1 ...params.OptionSetter) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvInt", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvInt indicates an expected call of GetEnvInt
func (mr *MockEnvMockRecorder) GetEnvInt(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvInt", reflect.TypeOf((*MockEnv)(nil).GetEnvInt), varargs...)
}

// GetEnvIntRange mocks base method
func (m *MockEnv) GetEnvIntRange(arg0 string, arg1, arg2 int, arg3 ...params.OptionSetter) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvIntRange", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvIntRange indicates an expected call of GetEnvIntRange
func (mr *MockEnvMockRecorder) GetEnvIntRange(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvIntRange", reflect.TypeOf((*MockEnv)(nil).GetEnvIntRange), varargs...)
}

// GetExeDir mocks base method
func (m *MockEnv) GetExeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExeDir indicates an expected call of GetExeDir
func (mr *MockEnvMockRecorder) GetExeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExeDir", reflect.TypeOf((*MockEnv)(nil).GetExeDir))
}

// GetGotifyToken mocks base method
func (m *MockEnv) GetGotifyToken(arg0 ...params.OptionSetter) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGotifyToken", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGotifyToken indicates an expected call of GetGotifyToken
func (mr *MockEnvMockRecorder) GetGotifyToken(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGotifyToken", reflect.TypeOf((*MockEnv)(nil).GetGotifyToken), arg0...)
}

// GetGotifyURL mocks base method
func (m *MockEnv) GetGotifyURL(arg0 ...params.OptionSetter) (*url.URL, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGotifyURL", varargs...)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGotifyURL indicates an expected call of GetGotifyURL
func (mr *MockEnvMockRecorder) GetGotifyURL(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGotifyURL", reflect.TypeOf((*MockEnv)(nil).GetGotifyURL), arg0...)
}

// GetGroupID mocks base method
func (m *MockEnv) GetGroupID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetGroupID indicates an expected call of GetGroupID
func (mr *MockEnvMockRecorder) GetGroupID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupID", reflect.TypeOf((*MockEnv)(nil).GetGroupID))
}

// GetHTTPTimeout mocks base method
func (m *MockEnv) GetHTTPTimeout(arg0 ...params.OptionSetter) (time.Duration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHTTPTimeout", varargs...)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPTimeout indicates an expected call of GetHTTPTimeout
func (mr *MockEnvMockRecorder) GetHTTPTimeout(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPTimeout", reflect.TypeOf((*MockEnv)(nil).GetHTTPTimeout), arg0...)
}

// GetListeningPort mocks base method
func (m *MockEnv) GetListeningPort(arg0 string, arg1 ...params.OptionSetter) (uint16, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListeningPort", varargs...)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListeningPort indicates an expected call of GetListeningPort
func (mr *MockEnvMockRecorder) GetListeningPort(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListeningPort", reflect.TypeOf((*MockEnv)(nil).GetListeningPort), varargs...)
}

// GetLoggerConfig mocks base method
func (m *MockEnv) GetLoggerConfig() (logging.Encoding, logging.Level, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerConfig")
	ret0, _ := ret[0].(logging.Encoding)
	ret1, _ := ret[1].(logging.Level)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoggerConfig indicates an expected call of GetLoggerConfig
func (mr *MockEnvMockRecorder) GetLoggerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerConfig", reflect.TypeOf((*MockEnv)(nil).GetLoggerConfig))
}

// GetLoggerEncoding mocks base method
func (m *MockEnv) GetLoggerEncoding(arg0 ...params.OptionSetter) (logging.Encoding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggerEncoding", varargs...)
	ret0, _ := ret[0].(logging.Encoding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggerEncoding indicates an expected call of GetLoggerEncoding
func (mr *MockEnvMockRecorder) GetLoggerEncoding(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerEncoding", reflect.TypeOf((*MockEnv)(nil).GetLoggerEncoding), arg0...)
}

// GetLoggerLevel mocks base method
func (m *MockEnv) GetLoggerLevel(arg0 ...params.OptionSetter) (logging.Level, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggerLevel", varargs...)
	ret0, _ := ret[0].(logging.Level)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggerLevel indicates an expected call of GetLoggerLevel
func (mr *MockEnvMockRecorder) GetLoggerLevel(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerLevel", reflect.TypeOf((*MockEnv)(nil).GetLoggerLevel), arg0...)
}

// GetOnOff mocks base method
func (m *MockEnv) GetOnOff(arg0 string, arg1 ...params.OptionSetter) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOnOff", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnOff indicates an expected call of GetOnOff
func (mr *MockEnvMockRecorder) GetOnOff(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnOff", reflect.TypeOf((*MockEnv)(nil).GetOnOff), varargs...)
}

// GetPath mocks base method
func (m *MockEnv) GetPath(arg0 string, arg1 ...params.OptionSetter) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPath", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPath indicates an expected call of GetPath
func (mr *MockEnvMockRecorder) GetPath(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockEnv)(nil).GetPath), varargs...)
}

// GetPort mocks base method
func (m *MockEnv) GetPort(arg0 string, arg1 ...params.OptionSetter) (uint16, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPort", varargs...)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort
func (mr *MockEnvMockRecorder) GetPort(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockEnv)(nil).GetPort), varargs...)
}

// GetRedisDetails mocks base method
func (m *MockEnv) GetRedisDetails() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedisDetails")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetRedisDetails indicates an expected call of GetRedisDetails
func (mr *MockEnvMockRecorder) GetRedisDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedisDetails", reflect.TypeOf((*MockEnv)(nil).GetRedisDetails))
}

// GetRootURL mocks base method
func (m *MockEnv) GetRootURL(arg0 ...params.OptionSetter) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRootURL", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootURL indicates an expected call of GetRootURL
func (mr *MockEnvMockRecorder) GetRootURL(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootURL", reflect.TypeOf((*MockEnv)(nil).GetRootURL), arg0...)
}

// GetURL mocks base method
func (m *MockEnv) GetURL(arg0 string, arg1 ...params.OptionSetter) (*url.URL, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetURL", varargs...)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL
func (mr *MockEnvMockRecorder) GetURL(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockEnv)(nil).GetURL), varargs...)
}

// GetUserID mocks base method
func (m *MockEnv) GetUserID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserID indicates an expected call of GetUserID
func (mr *MockEnvMockRecorder) GetUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockEnv)(nil).GetUserID))
}

// GetValueIfInside mocks base method
func (m *MockEnv) GetValueIfInside(arg0 string, arg1 []string, arg2 ...params.OptionSetter) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValueIfInside", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueIfInside indicates an expected call of GetValueIfInside
func (mr *MockEnvMockRecorder) GetValueIfInside(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueIfInside", reflect.TypeOf((*MockEnv)(nil).GetValueIfInside), varargs...)
}

// GetYesNo mocks base method
func (m *MockEnv) GetYesNo(arg0 string, arg1 ...params.OptionSetter) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetYesNo", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYesNo indicates an expected call of GetYesNo
func (mr *MockEnvMockRecorder) GetYesNo(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYesNo", reflect.TypeOf((*MockEnv)(nil).GetYesNo), varargs...)
}
